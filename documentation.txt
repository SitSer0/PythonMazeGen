Использование

Чтобы запустить скрипт, используйте следующую команду в командной строке:

python main.py <ширина> <высота> <тип_игры>

Где:
<ширина> - Ширина генерируемого лабиринта (между 2 и 200 включительно).
<высота> - Высота генерируемого лабиринта (между 2 и 200 включительно).
<тип_игры> - Тип игры, должен быть либо 'multi', либо 'solo'.

Примеры

Запуск приложения для одиночной игры в лабиринте размером 10x10:

python main.py 10 10 solo

Запуск приложения для многопользовательской игры в лабиринте размером 15x15:

python main.py 15 15 multi

Ограничения

Ширина и высота лабиринта ограничены минимальным значением в 2 и максимальным в 200.
Тип игры должен быть четко указан как 'multi' или 'solo'.
Рекурсивный лимит Python увеличен до 10000 для обработки больших лабиринтов; убедитесь, что ваш стек позволяет такое количество рекурсивных вызовов.






Документация для MazeApp.py

Основные компоненты:
- MazeApp: Главный класс приложения, унаследованный от tk.Tk. Отвечает за создание и управление окном приложения, отрисовку лабиринта и обработку действий игрока.

Конструктор класса `MazeApp` принимает следующие параметры:
- maze: Экземпляр класса, представляющий лабиринт.
- cell_size: Размер ячейки лабиринта в пикселях.
- start_x: Начальная координата X игрока.
- start_y: Начальная координата Y игрока.
- finish_x: Координата X финишной точки.
- finish_y: Координата Y финишной точки.
- path: Массив, описывающий путь решения лабиринта.
- solver: Экземпляр класса Solver, отвечающий за решение лабиринта.
- file: Путь к файлу для сохранения или загрузки лабиринта.
- type_game: Тип игры ('single' или 'multi').

Методы класса `MazeApp`:
- draw_maze(): Отрисовывает лабиринт на канвасе.
- draw_player(player, color=None): Отрисовывает игрока на канвасе.
- draw_green_cell(x, y, cell_size): Отрисовывает зелёную ячейку лабиринта (используется для начальной точки).
- draw_red_cell(x, y, cell_size): Отрисовывает красную ячейку лабиринта (используется для финишной точки).
- draw_yellow_line_*(): Отрисовывает части пути решения в лабиринте.
- move_*(): Методы для перемещения игрока по лабиринту.
- redraw_player(): Перерисовывает игрока на канвасе.
- game_over(message): Отображает сообщение о завершении игры и перезапускает лабиринт.
- check_finish(): Проверяет, достиг ли игрок финиша.
- restart_game_*(): Методы для перезапуска игры с новым лабиринтом, сгенерированным разными алгоритмами.


Документация модуля Maze.py

Класс Maze

Maze - это класс для генерации лабиринта с использованием различных алгоритмов. Лабиринт представлен двумерным массивом, где стены между ячейками кодируются битовыми флагами.

Методы класса
__init__(self, width, height)

Конструктор класса.

Параметры:

width (int): Ширина лабиринта (количество ячеек).
height (int): Высота лабиринта (количество ячеек).
find_set(self, x, y)

Найти представителя множества, в котором находится ячейка (x, y).

Параметры:

x (int): Координата X ячейки.
y (int): Координата Y ячейки.
Возвращает:

int: Представитель множества ячейки.
union_sets(self, x1, y1, x2, y2)

Объединяет два множества, которые содержат ячейки (x1, y1) и (x2, y2).

Параметры:

x1, y1 (int): Координаты первой ячейки.
x2, y2 (int): Координаты второй ячейки.
delete_wall(self, x1, y1, x2, y2)

Удаляет стену между двумя соседними ячейками.

Параметры:

x1, y1 (int): Координаты первой ячейки.
x2, y2 (int): Координаты второй ячейки.
_add_walls(self, cell, walls)

Добавляет в список стен все стены вокруг ячейки, если соседняя ячейка не посещена.

Параметры:

cell (tuple): Координаты текущей ячейки в формате (x, y).
walls (list): Список стен, куда будут добавлены новые.
generate_prims(self)

Генерирует лабиринт с использованием алгоритма Прима.

generate_kruskal(self)

Генерирует лабиринт с использованием алгоритма Краскала.

generate_dfs(self, x, y)

Генерирует лабиринт с использованием алгоритма поиска в глубину (DFS).

Параметры:

x (int): Координата X начальной ячейки.
y (int): Координата Y начальной ячейки.
regenerate_dfs(self)

Перегенерирует лабиринт, используя DFS, сбрасывая матрицу и посещенные ячейки.

regenerate_kruskal(self)

Перегенерирует лабиринт, используя алгоритм Краскала, сбрасывая матрицу и множества ячеек.

regenerate_prim(self)

Перегенерирует лабиринт, используя алгоритм Прима, сбрасывая матрицу и посещенные ячейки.



Документация класса File

Обзор

Класс File предназначен для сохранения и загрузки лабиринтов, представленных в виде двумерного массива. Этот класс обеспечивает интерфейс для записи текущего состояния лабиринта в файл и чтения лабиринта из файла.

Класс File

Методы класса
__init__(self, maze)

Конструктор класса.

Параметры:

maze (Maze): Экземпляр класса Maze, содержащий двумерный массив представления лабиринта.
saving(self)

Сохраняет текущее состояние лабиринта в текстовый файл. Пользователь вводит путь к папке и имя файла через стандартный ввод.

Исключения:

В случае некорректного ввода пути к файлу пользователем выводится сообщение об ошибке "Вы ввели некорректный путь".
loading(self)

Загружает лабиринт из текстового файла. Пользователь вводит путь к папке и имя файла через стандартный ввод. После загрузки файла обновляются параметры width и height экземпляра maze.

Исключения:

В случае некорректного ввода пути к файлу пользователем выводится сообщение об ошибке "Вы ввели некорректный путь".
Примечания
В методах saving и loading используется блок try-except для обработки исключений, которые могут возникнуть при работе с файловой системой.
Пользователю необходимо вводить пути к файлам и имена файлов без расширения .txt, так как оно добавляется в методах автоматически.
Метод loading перезаписывает текущее состояние двумерного массива в экземпляре maze, а также обновляет его размеры в соответствии с загруженными данными.


Документация класса Solver

Обзор

Класс Solver предназначен для поиска пути в лабиринте. Он использует алгоритм поиска в глубину (DFS) для определения пути от заданной начальной точки (x1, y1) до конечной точки (x2, y2) в лабиринте, представленном двумерным массивом.

Класс Solver

Методы класса
__init__(self, maze)

Конструктор класса.

Параметры:

maze (Maze): Экземпляр класса Maze, содержащий информацию о лабиринте.
Описание:

Инициализация экземпляра Solver включает создание двумерного массива path, который будет хранить информацию о пройденном пути.
solve(self, x1, y1, x2, y2)

Пытается найти путь от точки (x1, y1) до точки (x2, y2) в лабиринте, используя алгоритм DFS.

Параметры:

x1 (int): Координата x начальной точки.
y1 (int): Координата y начальной точки.
x2 (int): Координата x конечной точки.
y2 (int): Координата y конечной точки.
Описание:

Перед началом поиска пути массив path инициализируется значениями -2, а массив visited_solve — значениями False.
Внутренняя функция dfs рекурсивно исследует лабиринт, проверяя наличие стен и отмечая посещенные ячейки.
Если путь к конечной точке найден, массив path будет содержать последовательность чисел, указывающих порядок шагов от начальной точки к конечной.




Документация класса Player

Обзор

Класс Player представляет сущность игрока в контексте лабиринта. Он содержит методы для перемещения игрока в четырех направлениях (вверх, вниз, влево, вправо), при условии, что в данном направлении нет стен.

Класс Player

Методы класса
__init__(self, x, y)

Конструктор класса.

Параметры:

x (int): Начальная координата x игрока в лабиринте.
y (int): Начальная координата y игрока в лабиринте.
Описание:

Инициализирует позицию игрока и устанавливает его цвет по умолчанию на "синий".
move_up(self, maze=None)

Перемещает игрока вверх, если это возможно.

Параметры:

maze (Maze, необязательно): Экземпляр класса Maze, используется для проверки наличия стен.
Описание:

Проверяет, есть ли северная стена от текущей позиции игрока, и если нет, уменьшает координату y игрока на 1.
move_down(self, maze=None)

Перемещает игрока вниз, если это возможно.

Параметры:

maze (Maze, необязательно): Экземпляр класса Maze, используется для проверки наличия стен.
Описание:

Проверяет, есть ли южная стена от текущей позиции игрока, и если нет, увеличивает координату y игрока на 1.
move_left(self, maze=None)

Перемещает игрока влево, если это возможно.

Параметры:

maze (Maze, необязательно): Экземпляр класса Maze, используется для проверки наличия стен.
Описание:

Проверяет, есть ли западная стена от текущей позиции игрока, и если нет, уменьшает координату x игрока на 1.
move_right(self, maze=None)

Перемещает игрока вправо, если это возможно.

Параметры:

maze (Maze, необязательно): Экземпляр класса Maze, используется для проверки наличия стен.
Описание:

Проверяет, есть ли восточная стена от текущей позиции игрока, и если нет, увеличивает координату x игрока на 1.